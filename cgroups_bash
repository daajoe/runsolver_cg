Limit a process to a specific CPU core: [locks processes to particular processor cores-cpu pinning] [Cpusets provide a Linux kernel mechanism to constrain which CPUs and
Memory Nodes are used by a process or set of processes]
	
	make a group in sys/fs/cgroup/cpuset [Lets call it group1]
		$ cd /sys/fs/cgroup
		$ mkdir -p cpuset/group1
	Limit ‘group1’ to core 0 
		$ echo 0 > cpuset/group1/cpuset.cpus
	Assign memory node 1
		echo 1 > cpuset/group1/cpuset.mems
	Add a process by its PID
		$ echo PID > cpuset/group1/tasks
	To check:
		$ cat /proc/PID/status | grep '_allowed' 
	Sometimes you need to assign one or all memory nodes if a no space left on device error occurs
		$ echo 0 > cpuset/group1/cpuset.mems [Allocates memory node 0]
	
	To check CPUs and Memory Nodes in a cpuset
		$ cat cpuset.cpus [gives list of CPUs in that cpuset]
		$ cat cpuset.mems [gives list of Memory Nodes in that cpuset]
	
	To remove all the CPUS
		$ echo "" > cpuset/group1/cpuset.cpus
		
Set CPU Share: [Maximum 1024 units] [the min % of CPU time the process gets when the system is busy]
	make a group in sys/fs/cgroup/cpu [Lets call it group1]
		$ cd /sys/fs/cgroup
		$ mkdir -p cpu/group1 
		$ echo 250 > cpu/group1/cpu.shares
		$ echo PID > cpu/group1/tasks

Set memory limit: [Memory given to a particular process]
	make a group in sys/fs/cgroup/memory [Lets call it group1]
		$ cd /sys/fs/cgroup
		$ mkdir -p memory/group1
	Set a memory limit of 200M
		$ echo 200M > memory/group1/memory.limit_in_bytes
	Add a process by its PID
		$ echo PID > memory/group1/tasks
	To check memory limit and usage:
		$ cat memory.limit_in_bytes
		$ cat memory.usage_in_bytes
		
	The memory.failcnt field gives the number of times that the cgroup limit was exceeded. 		Whenever a memory cgroup hits a limit, failcnt increases and memory under it will be 	reclaimed.
	
	The memory.stat file gives accounting information.

To account the CPU usage of tasks
	make a group in sys/fs/cgroup/cpu,cpuacct [Lets call it group1]
		$ cd /sys/fs/cgroup
		$ mkdir group1
	Add a process by its PID
		$ echo [PID] > cpu,cpuacct/group1/tasks
	To obtain CPU time consumed by this process and its children [in seconds]
		$ cat group1/cpuacct.usage
	To obtain user and system times [these are further divisions of CPU time] [in USER_HZ]
		$ cat group1/cpuacct.stat
		
OOM Control [Out Of Memory]
	memory.oom_control file is for OOM notification and other controls
	
	OOM notifier allows to register multiple OOM notification delivery and gets 		  	notification when OOM happens
	
Memory Pressure
	The pressure level notifications can be used to monitor the memory allocation cost; 	based on the pressure, applications can implement different strategies of managing 		their memory resources. 
	
I have seen that you have to setup a cgroup as root, and make it configurable by your user. Otherwise permission will be denied. You can then add cgroups as subgroups to this user group.
	To enable the current user to modify the cgroups:
		$ sudo mkdir /sys/fs/cgroup/cpuset/${USER}
		$ sudo chown -R ${USER} /sys/fs/cgroup/cpuset/${USER}
	
If there shows the error message "bash: echo: write error: No space left on device" it means that you don't have any memory nodes assigned to the cpuset.
	Assign one or all memory nodes to this cgroup
		$ echo 0 > /sys/fs/cpuset/group1/cpuset.mems

cat /proc/PID/cgroup - gives the cgroup to which the process with PID is attached to (in cgroup v2)

cat /proc/PID/cpuset - gives the cgroup to which the process with PID is attached to (in cgroup v1)

In the cgroup.procs file, each such process apears only once (listed by its TGID).  In the tasks file, each thread appears once (listed by its PID).

procs is a list of (unique) TGIDs, while tasks is a list of PIDs.
	

